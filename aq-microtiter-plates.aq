{"config":{"title":"Aquarium Microtiter Plates","description":"Models for working with microtiter plates","copyright":"University of Washington","version":"0.0.1","authors":[{"name":"Devin Strickland","affiliation":"University of Washington"}],"maintainer":{"name":"Devin Strickland","email":"strcklnd@uw.edu"},"acknowledgements":null,"github":{"user":"dvnstrcklnd","repo":"aq-microtiter-plates"},"keywords":null,"aquadoc_version":"1.0.2","aquarium_version":"\u003c%= Bioturk::Application.config.aquarium_version %\u003e"},"components":[{"library":{"name":"MicrotiterPlate","category":"Microtiter Plates","code_source":"module MicrotiterPlate\n  # Convert a letter to the corresponding array index\n  #\n  # @param letter [String] the letter (usually of a row)\n  # @return Fixnum\n  def letter_to_index(letter)\n    alphabet_array.index(letter.upcase)\n  end\n\n  # Convert an array index to the corresponding letter of the alphabet\n  #\n  # @param index [Fixnum] the index (usually of a row)\n  # @return String\n  def index_to_letter(index)\n    alphabet_array[index]\n  end\n\n  # Array of all letters of the alphablet in uppercase\n  #\n  # @return Array\u003cString\u003e\n  def alphabet_array\n    ('A'..'Z').to_a\n  end\n\n  # Get the alpha component of an alphanumumeric coordinate\n  #\n  # @param alphanum [String]\n  # @return [String, nil] the first contiguous run of letters or nil if no\n  #   letters are found\n  def alpha_component(alphanum)\n    mtch = alphanum.match(/[[:alpha:]]+/)\n    return mtch[0] if mtch\n  end\n\n  # Get the numeric component of an alphanumumeric coordinate\n  #\n  # @param alphanum [String]\n  # @return [Fixnum, nil] the first contiguous run of digits or nil if no\n  #   digits are found\n  def numeric_component(alphanum)\n    mtch = alphanum.match(/\\d+/)\n    return mtch[0].to_i if mtch\n  end\nend"}},{"library":{"name":"PlateLayoutGenerator","category":"Microtiter Plates","code_source":"# frozen_string_literal: true\n\n# Factory class for instantiating `PlateLayoutGenerator`\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\nclass PlateLayoutGeneratorFactory\n  # Instantiates `PlateLayoutGenerator`\n  #\n  # @param group_size [FixNum] the size of groups of wells, e.g., correspinding\n  #   to replicates\n  # @return [PlateLayoutGenerator]\n  def self.build(group_size: 1)\n    PlateLayoutGenerator.new(group_size: group_size)\n  end\nend\n\n# Provides individual indices or batches of indices from a microtiter plate, in\n#   order from top left ,and yielding each index only once\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\nclass PlateLayoutGenerator\n  def initialize(group_size: 1)\n    @group_size = group_size\n    @layout = cdc_layout\n  end\n\n  def next(column: nil)\n    i = column ? first_index_in(column) : 0\n    @layout.slice!(i)\n  end\n\n  def next_group(column: nil)\n    i = column ? first_index_in(column) : 0\n    @layout.slice!(i, @group_size)\n  end\n\n  private\n\n  def first_index_in(column)\n    @layout.index { |x| x[1] == column }\n  end\n\n  def cdc_layout\n    lyt = []\n    [0, 4].each do |j|\n      cols = Array.new(12) { |c| c }\n      cols.each { |c| @group_size.times { |i| lyt \u003c\u003c [i + j, c] } }\n    end\n    lyt\n  end\nend\n"}}]}